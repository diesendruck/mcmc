r[which(z==0)] <- r.probs
round(r, 2)
round(q, 2)
z <- sample.z(pistar,z, q, r)       # 1. z ~ p(z | pistar, y)
z
q <- sample.q(pistar,z)       # 2. q ~ p(q | pistar,z,y)
round(q, 2)
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
TH <- NULL # initialize - will save pi*,z here
##             for each iteration
PI <- NULL # similar - will save (pi1,.., piN) here
th <-  init()
pistar <- th$pistar        # initialize pistar = pi*
z <- th$z            # initialize z
# Vector of probabilities for when z=1, and zeros otherwise.
q <- rep(0, N)
q.probs <- th$q
q[which(z==1)] <- q.probs
# Vector of probabilities for when z=0, and zeros otherwise.
r <- rep(0, N)
r.probs <- th$r
r[which(z==0)] <- r.probs
z
q
r
i=1
length(z)
z[i]==1
r[i]
r[i]*pistar*rho
i=2
z[i]==1
z[i]==0
r[i]
r[i]*pistar*rho
i
r[i]
r[i]^a0
r[i]^a0*(1-pistar)
r[i]^a0*(1-pistar)*(1-rho)
i=4
z[i]==1
q[i]
q[i]^a1
q[i]^a1*pistar
q[i]^a1*pistar*rho
.5
.5^.1
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
TH <- NULL # initialize - will save pi*,z here
##             for each iteration
PI <- NULL # similar - will save (pi1,.., piN) here
th <-  init()
pistar <- th$pistar        # initialize pistar = pi*
z <- th$z            # initialize z
# Vector of probabilities for when z=1, and zeros otherwise.
q <- rep(0, N)
q.probs <- th$q
q[which(z==1)] <- q.probs
# Vector of probabilities for when z=0, and zeros otherwise.
r <- rep(0, N)
r.probs <- th$r
r[which(z==0)] <- r.probs
z
q
r
for (i in 1:length(z)) {
if (z[i]==1) {
pr <- q[i]^a1*pistar*rho
} else if (z[i]==0) {
pr <- r[i]^a0*(1-pistar)*(1-rho)
}
z[i] <- ifelse(runif(1)<pr, 1, 0)
}
z
q
r
M1 <- length(which(z==1))
if (M1>0) {
new.q <- rdirichlet(1, rep(a1+1, M1))
} else {
new.q <- rep(0, M1)
}
q[which(z==1)] <- new.q
q
M1 <- length(which(z==1))
rep(0, M1)
sample.q <- function(pistar, z) {
M1 <- length(which(z==1))
if (M1>0) {
new.q <- rdirichlet(1, rep(a1+1, M1))
q[which(z==1)] <- new.q
} else if (M1==0) {
q <- rep(0, N)
}
return (q)
}
M1 <- length(which(z==1))
q
if (M1>0) {
new.q <- rdirichlet(1, rep(a1+1, M1))
q[which(z==1)] <- new.q
}
if (M1==0) {
q <- rep(0, N)
}
q
M0 <- length(which(z==0))
if (M0>0) {
new.r <- rdirichlet(1, rep(a0+1, M0))
r[which(z==0)] <- new.r
}
r
else if (M0==0) {
r <- rep(0, N)
}
if (M0==0) {
r <- rep(0, N)
}
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
TH <- NULL # initialize - will save pi*,z here
##             for each iteration
PI <- NULL # similar - will save (pi1,.., piN) here
th <-  init()
pistar <- th$pistar        # initialize pistar = pi*
z <- th$z            # initialize z
# Vector of probabilities for when z=1, and zeros otherwise.
q <- rep(0, N)
q.probs <- th$q
q[which(z==1)] <- q.probs
# Vector of probabilities for when z=0, and zeros otherwise.
r <- rep(0, N)
r.probs <- th$r
r[which(z==0)] <- r.probs
q
z
q
r
z <- sample.z(pistar,z, q, r)       # 1. z ~ p(z | pistar, y)
z
q <- sample.q(pistar,z)       # 2. q ~ p(q | pistar,z,y)
r <- sample.r(pistar,z)       # 3. r ~ p(r | pistar,z,y)
q
r
z <- sample.z(pistar,z, q, r)       # 1. z ~ p(z | pistar, y)
z
q <- sample.q(pistar,z)       # 2. q ~ p(q | pistar,z,y)
q
r <- sample.r(pistar,z)       # 3. r ~ p(r | pistar,z,y)
r
pistar <- sample.pistar(z)    # 4. pi
pistar
z <- sample.z(pistar,z, q, r)       # 1. z ~ p(z | pistar, y)
z
q <- sample.q(pistar,z)       # 2. q ~ p(q | pistar,z,y)
r <- sample.r(pistar,z)       # 3. r ~ p(r | pistar,z,y)
q
r
pistar <- sample.pistar(z)    # 4. pi
pistar
z <- sample.z(pistar,z, q, r)       # 1. z ~ p(z | pistar, y)
z
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
TH <- NULL # initialize - will save pi*,z here
##             for each iteration
PI <- NULL # similar - will save (pi1,.., piN) here
th <-  init()
pistar <- th$pistar        # initialize pistar = pi*
z <- th$z            # initialize z
# Vector of probabilities for when z=1, and zeros otherwise.
q <- rep(0, N)
q.probs <- th$q
q[which(z==1)] <- q.probs
# Vector of probabilities for when z=0, and zeros otherwise.
r <- rep(0, N)
r.probs <- th$r
r[which(z==0)] <- r.probs
z
q
r
z <- sample.z(pistar,z, q, r)       # 1. z ~ p(z | pistar, y)
z
pistar
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
source('~/.active-rstudio-document')
debugSource('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R')
pi
pi <- rep(0,N)
pi
pi[z==1] <- pistar*q
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
TH <- NULL # initialize - will save pi*,z here
##             for each iteration
PI <- NULL # similar - will save (pi1,.., piN) here
th <-  init()
pistar <- th$pistar        # initialize pistar = pi*
z <- th$z            # initialize z
# Vector of probabilities for when z=1, and zeros otherwise.
q <- rep(0, N)
q.probs <- th$q
q[which(z==1)] <- q.probs
# Vector of probabilities for when z=0, and zeros otherwise.
r <- rep(0, N)
r.probs <- th$r
r[which(z==0)] <- r.probs
i=1
z <- sample.z(pistar,z, q, r)       # 1. z ~ p(z | pistar, y)
q <- sample.q(pistar,z, q)       # 2. q ~ p(q | pistar,z,y)
r <- sample.r(pistar,z, r)       # 3. r ~ p(r | pistar,z,y)
pistar <- sample.pistar(z)    # 4. pi
if (verbose > 0){
if (i %% 10 == 0) {
# print short summary, for every 10th iteration
print(paste("Iteration: ", i))
print(round(z, 2))
print(round(q, 2))
print(round(r, 2))
print(round(pistar, 2))
}
}
TH <- rbind(TH, c(pistar,z))
pi <- rep(0,N)
pi
pi[z==0]
a <- c(1, 2, 3)
b <- rep(0, 3)
a
b
b[a==2]
b[a==2]
b[a==2] <- 55
b
pistar
q
z
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
TH <- NULL # initialize - will save pi*,z here
##             for each iteration
PI <- NULL # similar - will save (pi1,.., piN) here
th <-  init()
pistar <- th$pistar        # initialize pistar = pi*
z <- th$z            # initialize z
# Vector of probabilities for when z=1, and zeros otherwise.
q <- rep(0, N)
q.probs <- th$q
q[which(z==1)] <- q.probs
# Vector of probabilities for when z=0, and zeros otherwise.
r <- rep(0, N)
r.probs <- th$r
r[which(z==0)] <- r.probs
n.iter=10
for (i in 1:n.iter) { # loop over iterations
z <- sample.z(pistar,z, q, r)       # 1. z ~ p(z | pistar, y)
q <- sample.q(pistar,z, q)       # 2. q ~ p(q | pistar,z,y)
r <- sample.r(pistar,z, r)       # 3. r ~ p(r | pistar,z,y)
pistar <- sample.pistar(z)    # 4. pi
#     if (verbose > 0){
#       if (i %% 10 == 0) {
#         # print short summary, for every 10th iteration
#         print(paste("Iteration: ", i))
#         print(round(z, 2))
#         print(round(q, 2))
#         print(round(r, 2))
#         print(round(pistar, 2))
#       }
#     }
## save iteration
TH <- rbind(TH, c(pistar,z))
pi <- rep(0,N)
pi[z==1] <- pistar*q[z==1]
pi[z==0] <- (1-pistar)*r[z==0]
PI <- rbind(PI, pi)
}
pi
TH <- NULL # initialize - will save pi*,z here
##             for each iteration
PI <- NULL # similar - will save (pi1,.., piN) here
th <-  init()
pistar <- th$pistar        # initialize pistar = pi*
z <- th$z            # initialize z
# Vector of probabilities for when z=1, and zeros otherwise.
q <- rep(0, N)
q.probs <- th$q
q[which(z==1)] <- q.probs
# Vector of probabilities for when z=0, and zeros otherwise.
r <- rep(0, N)
r.probs <- th$r
r[which(z==0)] <- r.probs
n.iter=50
for (i in 1:n.iter) { # loop over iterations
z <- sample.z(pistar,z, q, r)       # 1. z ~ p(z | pistar, y)
q <- sample.q(pistar,z, q)       # 2. q ~ p(q | pistar,z,y)
r <- sample.r(pistar,z, r)       # 3. r ~ p(r | pistar,z,y)
pistar <- sample.pistar(z)    # 4. pi
#     if (verbose > 0){
#       if (i %% 10 == 0) {
#         # print short summary, for every 10th iteration
#         print(paste("Iteration: ", i))
#         print(round(z, 2))
#         print(round(q, 2))
#         print(round(r, 2))
#         print(round(pistar, 2))
#       }
#     }
## save iteration
TH <- rbind(TH, c(pistar,z))
pi <- rep(0,N)
pi[z==1] <- pistar*q[z==1]
pi[z==0] <- (1-pistar)*r[z==0]
PI <- rbind(PI, pi)
}
pi
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
n.iter <- 50; verbose=0
gbs <- gibbs(n.iter, verbose)
TH <- gbs$TH
PI <- gbs$PI
its <- 1:n.iter
plot(its, TH[,1],xlab="ITER",ylab="PI*",bty="l",type="l")
## boxplot
boxplot(log(PI))
## plotting posterior means vs. mle's
pibar <- apply(PI,2,mean) # posterior means
pihat <- as.numeric(y)/n
plot(pihat, pibar, type="p",
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)")
abline(0,1)
## same thing, zoom in to left lower corner
plot(pihat, pibar, type="p", xlim=c(0,0.03), ylim=c(0,0.03),
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)")
abline(0,1)
n.iter <- 50; verbose=1
gbs <- gibbs(n.iter, verbose)
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
n.iter <- 50; verbose=1
gbs <- gibbs(n.iter, verbose)
n.iter <- 50; verbose=0
gbs <- gibbs(n.iter, verbose)
## assume gbs returns a list with elements
## TH = (niter x p) matrix with each row being the
##      state (pi, z)
## PI = (niter x 1) vector with pi
TH <- gbs$TH
PI <- gbs$PI
its <- 1:n.iter
## trajectory plot of Z
plot(its, TH[,1],xlab="ITER",ylab="PI*",bty="l",type="l")
TH
PI
n.iter <- 500; verbose=0
gbs <- gibbs(n.iter, verbose)
## assume gbs returns a list with elements
## TH = (niter x p) matrix with each row being the
##      state (pi, z)
## PI = (niter x 1) vector with pi
TH <- gbs$TH
PI <- gbs$PI
its <- 1:n.iter
## trajectory plot of Z
plot(its, TH[,1],xlab="ITER",ylab="PI*",bty="l",type="l")
## boxplot
boxplot(log(PI))
## plotting posterior means vs. mle's
pibar <- apply(PI,2,mean) # posterior means
pihat <- as.numeric(y)/n
plot(pihat, pibar, type="p",
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)")
abline(0,1)
## same thing, zoom in to left lower corner
plot(pihat, pibar, type="p", xlim=c(0,0.03), ylim=c(0,0.03),
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)")
abline(0,1)
source('~/Google Drive/2. SPRING 2015/MCMC - Prof Mueller/M1/m1.R', echo=TRUE)
n.iter <- 1000; verbose=0
gbs <- gibbs(n.iter, verbose)
## assume gbs returns a list with elements
## TH = (niter x p) matrix with each row being the
##      state (pi, z)
## PI = (niter x 1) vector with pi
TH <- gbs$TH
PI <- gbs$PI
its <- 1:n.iter
## trajectory plot of Z
plot(its, TH[,1],xlab="ITER",ylab="PI*",bty="l",type="l")
plot(its, TH[,1],xlab="ITER",ylab="PI*",bty="l",type="l",
main="Trajectories of PI*")
boxplot(log(PI))
boxplot(log(PI), main="Marginal Posterior Distributions of P(PIj|y)")
boxplot(log(PI), main="Marginal Posterior Distributions of P(PIj|y)",
xlab="PIj", ylab="Log(PI)")
pibar <- apply(PI,2,mean) # posterior means
y
pihat <- as.numeric(y)/n
plot(pihat, pibar, type="p",
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)")
plot(pihat, pibar, type="p", xlim=c(0,0.03), ylim=c(0,0.03),
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)",
main="Posterior Means Versus MLEs")
pibar <- apply(PI,2,mean) # posterior means
pihat <- as.numeric(y)/n
plot(pihat, pibar, type="p",
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)")
pibar <- apply(PI,2,mean) # posterior means
pihat <- as.numeric(y)/n
plot(pihat, pibar, type="p",
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)",
main="Posterior Means Versus MLEs")
abline(0,1)
text(locator(), labels = c("red line", "black line)"))
pibar <- apply(PI,2,mean) # posterior means
pihat <- as.numeric(y)/n
plot(pihat, pibar, type="p",
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)",
main="Posterior Means Versus MLEs")
abline(0,1)
text(locator(), labels = c("Line y=x"))
text(locator(), labels = c("Line y=x"))
text(locator(), labels = c("Line y=x"))
help(text)
pibar <- apply(PI,2,mean) # posterior means
pihat <- as.numeric(y)/n
plot(pihat, pibar, type="p",
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)",
main="Posterior Means Versus MLEs")
abline(0,1)
text(locator(), labels = c("Line y=x"))
text(x=500, y=500, labels = c("Line y=x"))
text(2, 1, labels = c("Line y=x"))
text(2, 1, labels = c("Line y=x"))
text(locator(), labels = c("Line y=x", ""))
text(locator(), labels = c("Line y=x", ""))
plot(pihat, pibar, type="p", xlim=c(0,0.03), ylim=c(0,0.03),
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)",
main="Posterior Means Versus MLEs")
abline(0,1)
plot(pihat, pibar, type="p", xlim=c(0,0.03), ylim=c(0,0.02),
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)",
main="Posterior Means Versus MLEs")
abline(0,1)
plot(pihat, pibar, type="p", xlim=c(0,0.03), ylim=c(0,0.018),
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)",
main="Posterior Means Versus MLEs")
abline(0,1)
3
3
3
plot(pihat, pibar, type="p", xlim=c(0,0.03), ylim=c(0,0.03),
pch=19, bty="l",xlab="MLE pihat", ylab="E(pi | y)",
main="Posterior Means Versus MLEs")
abline(0,1)
N
y
n
y[3]
plot(pibar-pihat, y, type="p",
pch=19, bty="l",xlab="Sample Size", ylab="MLE pihat - E(pi | y)",
main="Shrinkage")
plot(y, pibar-pihat, type="p",
pch=19, bty="l",xlab="Sample Size", ylab="MLE pihat - E(pi | y)",
main="Shrinkage")
y
pibar-pihat
as.numeric(y)
shrink <- rbind(pibar-pihat, as.numeric(y))
shrink
plot(shrink[2,], shrink[1,], pibar-pihat, type="p",
pch=19, bty="l",xlab="Sample Size", ylab="MLE pihat - E(pi | y)",
main="Shrinkage")
shrink[1,]
shrink[2,]
plot(shrink[2,], shrink[1,], type="p",
pch=19, bty="l",xlab="Sample Size", ylab="MLE pihat - E(pi | y)",
main="Shrinkage")
shrink <- rbind(pibar-pihat, as.numeric(y))
plot(shrink[2,], shrink[1,], type="p",
pch=19, bty="l",xlab="Sample Size", ylab=paste(expression(hat(pi)," - E(pi | y)",
main="Shrinkage")
)
)
shrink <- rbind(pibar-pihat, as.numeric(y))
plot(shrink[2,], shrink[1,], type="p",
pch=19, bty="l",xlab="Sample Size", ylab=c(expression(hat(pi)," - E(pi | y)",
main="Shrinkage")
))
plot(shrink[2,], shrink[1,], type="p",
pch=19, bty="l",xlab="Sample Size", ylab=c(expression(hat(pi))," - E(pi | y)"),
main="Shrinkage")
shrink <- rbind(pibar-pihat, as.numeric(y))
plot(shrink[2,], shrink[1,], type="p",
pch=19, bty="l",xlab="Sample Size", ylab=c(expression(hat(pi), - E(pi | y))),
main="Shrinkage")
shrink <- rbind(pibar-pihat, as.numeric(y))
plot(shrink[2,], shrink[1,], type="p",
pch=19, bty="l",xlab="Sample Size", ylab=c(expression(hat(pi)-hat(theta))),
main="Shrinkage")
shrink <- rbind(pibar-pihat, as.numeric(y))
plot(shrink[2,], shrink[1,], type="p",
pch=19, bty="l",xlab="Sample Size", ylab=c(expression(bar(pi)-hat(pi))),
main="Shrinkage")
plot(shrink[2,], shrink[1,], type="p", xlim=c(0,100), ylim=c(-0.12,0.05),
pch=19, bty="l",xlab="Sample Size", ylab=c(expression(bar(pi)-hat(pi))),
main="Shrinkage")
plot(shrink[2,], shrink[1,], type="p", xlim=c(0,100), ylim=c(-0.12,0.02),
pch=19, bty="l",xlab="Sample Size", ylab=c(expression(bar(pi)-hat(pi))),
main="Shrinkage")
plot(shrink[2,], shrink[1,], type="p", xlim=c(0,100), ylim=c(-0.12,0.025),
pch=19, bty="l",xlab="Sample Size", ylab=c(expression(bar(pi)-hat(pi))),
main="Shrinkage")
hist(rbeta(1000, .9, .1))
